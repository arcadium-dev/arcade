#!/usr/bin/env bash

# shellcheck disable=SC1091,SC2119,SC2120

source "$(dirname "$0")/common.sh"
source "$(dirname "$0")/../env/influxdb_token"

app="$(basename "$0")"
declare -r app

declare -ar infrastructure=(
	"influxdb"
	"telegraf"
	"cockroach"
	"postgres"
)

declare -ar cockroach_dbs=(
	"arcade"
)

declare -ar cockroach_clients=(
	"root"
	"arcadium"
)

declare -ar tls_servers=(
	"assets"
	"influxdb"
	"cockroachdb"
	"postgres"
)

declare -ar tls_clients=(
	"postgres"
)

declare -ar networks=(
	"arcadium_network"
	"database_network"
	"observability_network"
)

declare -ar services=(
	"assets"
)

declare -Ar influxdb_config=(
	["username"]="arcadium"
	["password"]="arcadium"
	["organization"]="arcadium"
	["bucket"]="arcade"
	["token"]="${INFLUXDB_TOKEN}"
)

declare -ar migrations=(
	"cockroach-migrate"
	"postgres-migrate"
)

docker_compose() {
	if command -v docker-compose; then
		docker-compse "$@"
	else
		docker compose "$@"
	fi
}

#----------------------------------------------------------------------------
# init

init() {
	local command="${1:-all}"
	shift >/dev/null
	if ! cmd_check "init_${command}"; then
		help
		failed
	fi
	"init_${command}" "$@"
}

init_all() {
	init_networks && init_certs && init_influxdb && init_db && init_migrate
}

init_networks() {
	info "Creating networks"
	local network
	for network in "${networks[@]}"; do
		printf "%-20s" "${network}:"
		docker network create "${network}" 2>&1 | sed "s/Error response from daemon: //"
	done
	docker network ls
}

init_certs() {
	local -r certs_dir="/etc/certs"

	# Remove the old certs
	docker volume rm -f certificates_volume 2>/dev/null

	init_cockroach_certs

	# Create the CA cert for TLS communication.
	info "Installing root CA certificate"
	if ! docker_compose run --rm mkcert -install; then
		failed
	fi

	# Create the server certs for TLS servers.
	local server_cert
	for server_cert in "${tls_servers[@]}"; do
		info "Creating ${server_cert} server cert"
		if ! docker_compose run --rm mkcert -cert-file "${certs_dir}/${server_cert}.pem" -key-file "${certs_dir}/${server_cert}_key.pem" "${server_cert}"; then
			failed
		fi
	done

	# Create the client certs for TLS clients.
	local client_cert
	for client_cert in "${tls_clients[@]}"; do
		info "Creating ${client_cert} client cert"
		if ! docker_compose run --rm mkcert -client -cert-file "${certs_dir}/${client_cert}_client.pem" -key-file "${certs_dir}/${client_cert}_client_key.pem" "${client_cert}"; then
			failed
		fi
	done

	success
}

init_cockroach_certs() {
	# Create the cockroach CA cert.
	info "Installing Cockroach CA certificate"
	if ! docker_compose run --rm cockroach cert create-ca --allow-ca-key-reuse --overwrite --certs-dir="${certs_dir}" --ca-key="${certs_dir}/ca.key"; then
		failed
	fi

	# Create the cockroach node cert.
	info "Creating Cockroach node certificate"
	if ! docker_compose run --rm cockroach cert create-node cockroach --overwrite --certs-dir="${certs_dir}" --ca-key="${certs_dir}/ca.key"; then
		failed
	fi

	# Create the cockroach client cert.
	local cockroach_client
	for cockroach_client in "${cockroach_clients[@]}"; do
		info "Creating Cockroach client certificate for user ${cockroach_client}"
		if ! docker_compose run --rm cockroach cert create-client "${cockroach_client}" --overwrite --certs-dir="${certs_dir}" --ca-key="${certs_dir}/ca.key"; then
			failed
		fi
	done

	docker_compose run --rm cockroach cert list --certs-dir="${certs_dir}"
}

init_influxdb() {
	info "Influxdb initialization"

	# Remove the influxdb volume.
	docker_compose down &>/dev/null
	docker volume rm arcade_influxdb_volume 2>/dev/null
	docker_compose up -d "influxdb"
	sleep 10

	docker_compose run --rm influx setup \
		--force \
		--skip-verify \
		--host "https://influxdb:8086" \
		--username "${influxdb_config[username]}" \
		--password "${influxdb_config[password]}" \
		--org "${influxdb_config[organization]}" \
		--bucket "${influxdb_config[bucket]}" \
		--token "${influxdb_config[token]}"
}

init_db() {
	info "Database initialization"

	init_cockroach_db
	init_postgres_db
}

init_cockroach_db() {
	# Remove the db volume.
	docker_compose down cockroach &>/dev/null
	docker volume rm arcade_cockroach_volume #&>/dev/null
	docker_compose up -d "cockroach"
	sleep 1

	local db
	for db in "${cockroach_dbs[@]}"; do
		create_cockroach_db "${db}"
	done
}

create_cockroach_db() {
	local -r db="${1}"
	local user="arcadium" role="${db}_role" passwd="arcadium"

	info "Cockroach ${db} database initialization"
	if ! docker_compose run --rm csql --execute="
    create database ${db};
    show databases;
    use ${db};
    create role ${role};
    grant create, drop on database ${db} to ${role};
    alter default privileges grant delete, insert, select, update on tables to ${role};
    show grants on database ${db};
    create user ${user} with password ${passwd};
    grant ${role} to ${user};
    show roles;
  "; then
		failed
	fi
}

init_postgres_db() {
	docker_compose down postgres &>/dev/null
	docker volume rm arcade_postgres_volume #&>/dev/null
	docker_compose up -d "postgres"
	sleep 1
}

init_migrate() {
	local -a args=("up")
	if [[ "$*" != "" ]]; then
		args=("$@")
	fi

	info "Running database migrations"

	local migrate
	for migrate in "${migrations[@]}"; do
		info "Running ${migrate} ${args[*]}"
		if ! docker_compose run --rm "${migrate}" "${args[@]}"; then
			failed
		fi
	done
}

#----------------------------------------------------------------------------
# services

start() {
	info "Services starting"
	set +o noglob
	chmod 0644 env/*
	set -o noglob

	local -a s
	if [[ $# -gt 0 ]]; then
		s=("$@")
	else
		s=("${infrastructure[@]}" "${services[@]}")
	fi

	if ! docker_compose up -d "${s[@]}"; then
		failed
	fi
}

up() {
	start
}

status() {
	info "Services status"
	docker_compose ps
}

ps() {
	status
}

logs() {
	docker_compose logs "$@"
}

stop() {
	info "Services stopping"

	local -a s=()
	if [[ $# -gt 0 ]]; then
		s=("$@")
	fi

	if [[ ${#s[@]} -eq 0 ]]; then
		docker_compose down
	else
		docker_compose stop "${s[@]}"
	fi
}

down() {
	stop "$@"
}

pull() {
	docker_compose pull "$@"
}

#----------------------------------------------------------------------------
# clean

clean() {
	local command="${1:-all}"
	shift >/dev/null
	if ! cmd_check "clean_${command}"; then
		help
		failed
	fi
	"clean_${command}" "$@"
}

nuke() {
	stop
	clean_system
	clean_volumes
	clean_network
}

clean_all() {
	local answer
	echo -n "This removes ALL docker containers, volumes, and networks. Are you sure? [y/N] "
	read -r answer
	if [[ "${answer}" != "y" ]]; then
		return
	fi
	nuke
}

clean_system() {
	docker system prune -af || true
}

clean_volumes() {
	docker volume prune -f --filter all=1 || true
}

clean_network() {
	docker network prune -f || true
}

#----------------------------------------------------------------------------
# run

run() {
	docker_compose run --rm --name "${1}-$(uuidgen)" "$@"
}

#----------------------------------------------------------------------------
# completion

completion() {
	case "${1:-}" in
	"init")
		echo "networks certs db migrate"
		;;
	"dev")
		echo "init start up pull status ps logs stop down clean help"
		;;
	"clean")
		echo "system volumes network"
		;;
	esac
	exit 0
}

#----------------------------------------------------------------------------
# help

help() {
	cat <<-EOHELP
		usage: ${app} command command_options

		  commands:
		    init [networks|certs|influxdb|db|migrate]
		    start
		    up
		        pull
		    status
		    ps
		    logs
		    stop
		    down
		    clean
		    help
	EOHELP
}

#----------------------------------------------------------------------------
# main

main() {
	if [[ ! -x ./bin/dev ]]; then
		die "Must be in the root directory to run dev."
	fi

	local command="${1:-status}"
	if ! cmd_check "${command}"; then
		help
		failed
	fi
	shift || true
	if ! "${command}" "$@"; then
		failed
	fi
}

main "$@"
